datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum EAccountStatus {
  Pending
  Active
  Inactive
  Rejected
  Suspended
}

enum EGender {
  Male
  Female
  Others
}

enum EMembershipTypes {
  Staff
  Faculty
  Tutor
}

enum EUserRoles {
  Member
  Coordinator
  AssistantManager
  Manager
}

enum EBookRequestStatus {
  Pending
  Noted
  Resolved
}

enum EPaymentType {
  Membership
  Penalty
}

enum EPenaltyStatus {
  Pending
  Resolved
}

enum EPenaltyTypes {
  PropertyDamage
  Overdue
}

enum EBooksTypes {
  Available
  Reserved
  Issued
}

enum EReservationStatus {
  Pending
  Cancelled
  Confirmed
  Resolved
}

model MembershipTypes {
  membershipTypeId String @id @default(cuid())
  type EMembershipTypes
  precedence Int
  membership Memberships[]
}

model UserRoles {
  roleId String @id @default(cuid())
  role EUserRoles
  precedence Int
  user Users[]
}

model Users {
  userId String @id @default(cuid())
  fullName String
  dob DateTime
  address String
  contactNo String?
  profilePicUrl String? @db.VarChar(1000)
  accountCreationDate DateTime @default(now())
  enrollmentYear DateTime
  gender EGender
  roleId String
  role UserRoles @relation(fields: [roleId], references: [roleId])
  membershipId String
  membership Memberships @relation(fields: [membershipId], references: [membershipId])
  rollNumber String @unique
  email String @unique
  password String
  accountStatus EAccountStatus @default(Pending)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  bookRequests BookRequests[]
  notifications Notifications[]
  penalties Penalties[]
  payments Payments[]
  issues Issues[]
  comments Comments[]
  commentsReplies CommentReplies[]
  ratings Ratings[]
  sessions Sessions[]
}

model Memberships {
  membershipId String @id @default(cuid())
  startDate DateTime
  expiryDate DateTime
  membershipTypeId String
  type MembershipTypes @relation(fields: [membershipTypeId], references: [membershipTypeId])
  user Users[]
}

model BookRequests {
  requestId String @id @default(cuid())
  bookName String
  authorName String
  status EBookRequestStatus @default(Pending)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
  userId String
  user Users @relation(fields: [userId], references: [userId])
}

model Notifications {
  notificationId String @id @default(cuid())
  title String
  body String
  icon String @db.VarChar(2050)
  userId String
  user Users @relation(fields: [userId], references: [userId])
  read Boolean @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model Penalties {
  penaltyId String @id @default(cuid())
  description String @db.VarChar(500)
  amount Float @db.Double
  status EPenaltyStatus
  penaltyType EPenaltyTypes @default(Overdue)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
  userId String
  user Users @relation(fields: [userId], references: [userId])
}

model Payments {
  paymentId String @id @default(cuid())
  amountPaid Float @db.Double
  paymentType EPaymentType @default(Membership)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
  userId String
  user Users @relation(fields: [userId], references: [userId])
}

model BookInfo {
  bookInfoId String @id @default(cuid())
  classNumber String @unique
  bookNumber String @unique
  title String
  subTitle String?
  editionStatement String?
  numberOfPages BigInt
  publicationYear DateTime @db.Date
  seriesStatement String?
  addedDate DateTime @default(now())
  coverPhoto String? @db.VarChar(2050)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
  bookAuthors BookWithAuthors[]
  publisherId String
  publisher Publishers @relation(fields: [publisherId], references: [publisherId])
  isbns isbns[]
  bookGenres BookWithGenres[]
  book Books[]
  purchases BookPurchases[]
  reservations BookReservations[]
  comments Comments[]
  ratings Ratings[]
  score BookRatingScore[]

  @@fulltext([title, subTitle])
}

model Authors {
  authorId String @id @default(cuid())
  title String?
  fullName String
  bookAuthors BookWithAuthors[]
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?

  @@fulltext([fullName])
}

model BookWithAuthors {
  bookAuthorId String @id @default(cuid())
  bookInfoId String
  authorId String
  author Authors @relation(fields: [authorId], references: [authorId])
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}

model Publishers {
  publisherId String @id @default(cuid())
  publisherName String
  address String
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
  bookInfo BookInfo[]
}

model isbns {
  isbnId String @id @default(cuid())
  isbn String @unique
  bookInfoId String
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}

model Genres {
  genreId String @id @default(cuid())
  genre String
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
  bookGenres BookWithGenres[]

  @@index([genre])
}

model BookWithGenres {
  bookGenreId String @id @default(cuid())
  bookInfoId String
  genreId String
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  genre Genres @relation(fields: [genreId], references: [genreId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}

model Books {
  bookId String @id @default(cuid())
  barcode String @unique
  status EBooksTypes @default(Available)
  damagedOn DateTime? @db.Date
  bookInfoId String
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  issues Issues[]
  reservations BookReservations[]
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?

  @@index([barcode])
}

model BookPurchases {
  purchaseId String @id @default(cuid())
  bookInfoId String
  pricePerPiece Float @db.Double
  totalPieces Int
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model Issues {
  issueId String @id @default(cuid())
  checkInDate DateTime
  checkOutDate DateTime?
  dueDate DateTime
  renewalRequestedAt DateTime?
  renewalRequest Boolean @default(false)
  renewalCount Int @default(0)
  bookId String
  book Books @relation(fields: [bookId], references: [bookId])
  userId String
  user Users @relation(fields: [userId], references: [userId])
  issuedBy String
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model BookReservations {
  reservationId String @id @default(cuid())
  reservationDate DateTime @db.Timestamp(3) @default(now())
  status EReservationStatus @default(Pending)
  bookId String?
  bookInfoId String
  book Books? @relation(fields: [bookId], references: [bookId])
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model OnlineBooks {
  onlineBookId String @id @default(cuid())
  purchaseUrl String? @db.VarChar(2050)
  filePath String? @db.VarChar(1000)
  title String
  coverPhoto String? @db.VarChar(1000)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model Comments {
  commentId String @id @default(cuid())
  comment String @db.VarChar(10000)
  userId String
  bookInfoId String
  user Users @relation(fields: [userId], references: [userId])
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  replies CommentReplies[]
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model CommentReplies {
  commentReplyId String @id @default(cuid())
  reply String @db.VarChar(10000)
  userId String
  commentId String
  user Users @relation(fields: [userId], references: [userId])
  comment Comments @relation(fields: [commentId], references: [commentId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model Ratings {
  ratingId String @id @default(cuid())
  bookInfoId String
  userId String
  rating Int @db.TinyInt @default(0)
  user Users @relation(fields: [userId], references: [userId])
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model BookRatingScore {
  bookRatingScoreId String @id @default(cuid())
  bookInfoId String
  score Float @db.Float
  bookInfo BookInfo @relation(fields: [bookInfoId], references: [bookInfoId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model GlobalAttributes {
  globalAttributeId String @id @default(cuid())
  penaltyPerDay Float @db.Double
  membershipValidationMonths Int
  issueValidityDays Int
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  deletedAt DateTime?
}

model Sessions {
  sessionId BigInt @id @default(autoincrement())
  session String @unique
  userId String
  user Users @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  expiresAt DateTime @db.Timestamp(3)
}